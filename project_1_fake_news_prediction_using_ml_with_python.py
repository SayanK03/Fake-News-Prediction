# -*- coding: utf-8 -*-
"""Project 1 : Fake News Prediction using ML with Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ga4RyRaPWA_W6MSLCa5_qNvXt3Fy4sGp

About the Dataset:
1. id : unique id for a news article
2. title : the title of news article
3. author : author of the news article
4. text : the text of the article; could be incomplete
5. lable : a label that marks whether the news article is real or fake:  

*   1 ---> fake news
*   0 ---> real news

Importing the dependencies
"""

import numpy as np # add array
import pandas as pd # data frame
import re # reguler expression library it is useful for searching words in a text or paragraph
from nltk.corpus import stopwords  #corpus means the body of the text. Stopwords are those words which doesn't add much value to a paragraph vertex, it can be the articles or what where when
from nltk.stem.porter import PorterStemmer # porter takes a word and removes the prefix and suffix of that word and returned the root word of it
from sklearn.feature_extraction.text import TfidfVectorizer # Tfidfvectorizer used to convert this text into feature vectors
from sklearn.model_selection import train_test_split # used to split our dataset into training data test data
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stopwords in english
print(stopwords.words('english'))

"""Data Pre-processing"""

# load the dataset to a pandas dataframe
news_dataset = pd.read_csv('/content/train.csv')

news_dataset.shape

#print the first 5 rows of the dataframe
news_dataset.head()

# counting the number of missing values in dataset
news_dataset.isnull().sum()

# replacing the null values with emty string
news_dataset = news_dataset.fillna('')

# merging the author name and news title
news_dataset['content'] = news_dataset['author'] + '' + news_dataset['title']

print(news_dataset['content'])

# separating the data & label
X = news_dataset.drop(columns='label', axis=1) # drop funtion remove the label column
Y = news_dataset['label']

print(X)

print(Y)

"""Stemming :
 it is the process of reducing a word to its Root word.
 example--
 actor,actress, acting ---> act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content) # ^ means exclusion # remove all the numbers
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content) # join all the words with space
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming) #apply stemming funtion

print(news_dataset['content'])

# separating the data and label
X = news_dataset['content'].values
Y = news_dataset['label'].values

print(X)

print(Y)

Y.shape

"""Converting textual data to Numerical data"""

#Converting textual data to Numerical data
vectorizer = TfidfVectorizer()  #Tf is term frequency --> it counts the number of times a particular word is repeating in a document or text paragraph.... Idf means inverse documet frequency --> it finds those values which are repeating so many times and it detects that those words are not significant and it reduces it importance value
vectorizer.fit(X)  #fitting the vectorizer method in X

X = vectorizer.transform(X) # transform convert all these values to its respective features

print(X)

"""Splitting the dataset to training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2) # test_size = 0.2 means we take 20% of dataset as test data, label of X_train contain in Y_train same for X_test to Y_test, random state = 2 means splitter data in a same manner and it can be any integer valu 1or 2 or 3 etc..

"""Training the Model : Logistic Regression Model"""

model = LogisticRegression()

model.fit(X_train, Y_train) # here fit funtion will train the model

"""Evaluation"""

# accuracy score on the traing data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""Making a predictive System"""

X_new = X_test[3]  # X_new is new data

prediction = model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('The news is real')
else:
  print('The news is fake')

print(Y_test[3])